group 'stackoverflow.tests'
version '1.0'

apply plugin: 'java'
apply plugin: 'maven'

sourceCompatibility = 1.8


repositories {
    maven { url 'https://jitpack.io' }

    mavenCentral()

    mavenLocal()

    flatDir {
        dirs '/Users/daniel/.ant/lib'

    }
}

buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }

        mavenCentral()

    }
    dependencies {
        classpath "net.ltgt.gradle:gradle-apt-plugin:0.13"
        classpath "org.springframework.boot:spring-boot-gradle-plugin:1.5.9.RELEASE"
    }
}


apply plugin: "net.ltgt.apt"
//apply plugin: "org.springframework.boot"


configurations {
    daniel
}
dependencies {


    apt group: 'org.projectlombok', name: 'lombok', version: '1.16.20'

    apt group: 'org.mapstruct', name: 'mapstruct-processor', version: '1.2.0.Final'
    compile group: 'org.mapstruct', name: 'mapstruct-jdk8', version: '1.2.0.Final'
    compile group: 'commons-cli', name: 'commons-cli', version: '1.4'

    compileOnly 'javax.annotation:jsr250-api:1.0'
    compile group: 'javax.inject', name: 'javax.inject', version: '1'
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.9.3'
    compileOnly group: 'org.projectlombok', name: 'lombok', version: '1.16.20'

    compile group: 'com.fasterxml.jackson.core', name: 'jackson-annotations', version: '2.9.3'
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: '2.9.3'
    compile 'com.sparkjava:spark-core:2.7.1'
    compile 'log4j:log4j:1.2.17'
    testCompile group: 'junit', name: 'junit', version: '4.12'
    compile group: 'org.springframework.boot', name: 'spring-boot-starter', version: '1.4.3.RELEASE'
    // compile group: 'org.springframework', name: 'spring-webmvc', version: '4.1.3.RELEASE'
    testCompile group: 'org.springframework.boot', name: 'spring-boot-starter-test', version: '1.5.9.RELEASE'
}



dependencies {
   // daniel ':stackoverflow.tests:+'

    daniel 'com.squareup.moshi:moshi:+'
}


// ********* Package number of modules ***********//
//
//configurations {
//    modules
//    compile.extendsFrom(modules)
//}
//
//dependencies{
//    modules project(':moudle2')
//    modules project(':moudle3')
//}
//
//
//task packageAll(type: Jar) {
//    manifest {
//        attributes 'Main-Class': 'YourMainClass'
//    }
//
//    // pack yours main module
//    from sourceSets.main.output
//
//    // pack your other two modules
//    from {
//        configurations.modules.collect { it.isDirectory() ? it : zipTree(it) }
//    }
//
//    // pack all dependencies in the project
//    from configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
//
//    version = ""
//    baseName = "MY-Android-SDK"
//}


apply plugin: 'maven-publish'

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            // more goes in here
        }
    }
    repositories {
        mavenCentral()

    }
}

// ******** Pack to zip depends on jar first ******** //
//task packJar(type: Jar) {
//    manifest {
//        attributes 'Main-Class': 'YourMainClass'
//    }
//
//    version = ""
//    baseName = "myapp"
//}
//
//
//task zipMeUp(type:Zip, dependsOn :[packJar]) {
//    String zipName = 'myapp-1.0.zip'
//
//    from 'build/libs/myapp.jar'
//    from 'AppGuide.md'
//    from 'app-config.json'
//
//    version = "1.0"
//    baseName = "myapp"
//}

// ******* Pass args to command line  ***********/
//task testing(type: Exec) {
//    commandLine 'cmd', '/c', 'run.bat' ,arg1
//    commandLine './run.sh' , arg1
//}

// ********* Copy task ********* //
//task customBuild(type: Copy, dependsOn: [jar]) {
//    from "dataservices/src/main/resources/"
//    into "build/resources"
//    include "application.properties"
//}

//task customBuild(type: Jar) {
//    from ("src/main/java/abstract/"){
//        into "abstract"
//    }
//
//    version = ""
//    baseName = "myClasses"
//}

// ********* java exec *********** //
//task run(type: JavaExec) {
//    classpath = sourceSets.main.runtimeClasspath
//
//    if (project.hasProperty('first')){
//        if (chooseMain == 'Main1'){
//            main = 'application.Main1'
//        } else if (chooseMain == 'second'){
//            main = 'application.Main2'
//        }
//    } else {
//        println 'please pass the main name'
//    }
//}

//war {
//    // bring all jars to RootDir/libs
//    from(configurations.runtime) {
//        into 'libs'
//    }
//}

//******** rename jar task********//
//// saves the old jar task
//def oldJarTask = tasks.jar
//
//// remove the original jar tasks from the tasks list
//tasks.remove(jar)
//
//// create a new task named "jar" thats depends on shadowJAr
//// when you will run jar it will be actually run the shadow jar
//task jar(dependsOn:[shadowJar])
//
//// create a task to tun the plain old good jar task from gradle :)
//task oldJar(dependsOn: oldJarTask)


//configurations {
//    api
//    compile.extendsFrom(api)
//
//}


//task packAllToJar (type : Jar){
//    // pack yours main module
//    from sourceSets.main.output
//
//
//    // pack your other "Api" module
//    from {
//        configurations.api.collect { it.isDirectory() ? it : zipTree(it) }
//    }
//
//    // pack all dependencies in the root project
//    from configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
//
//    // Set name and version
//    version = "1.0"
//    baseName = "customJarName"
//}


//
//def ivyDir = new File("build/ivy/")
//ivyDir.mkdirs()
//
//def file = new File("build/ivy/build.xml")
//if (!file.exists()) {
//    new URL('http://localhost:8080/build.xml').withInputStream { i -> file.withOutputStream { it << i } }
//}
//
//
//
//ant.importBuild 'build/ivy/build.xml'
//ant.properties['ivy.revision'] = "2."
//ant.properties['ivy.group'] = group
//ant.properties['ivy.name'] = name
//
//
//
//task downloadIvy() {
//    def f = new File("build/ivy/ivy.jar")
//    if (!f.exists()) {
//        new URL('file:///Users/daniel/.ant/lib/ivy.jar').withInputStream { i -> f.withOutputStream { it << i } }
//    }
//
//}
//
//task getNextBuild(dependsOn: [downloadIvy, ivyBuildNumber]) {
//    doLast {
//        def nextVersion = ant.properties['ivy.new.revision']
//        println nextVersion
//    }
//}
//

//  cmd exit code
//task executeScript(type : Exec) {
//    commandLine 'sh', 'run.sh', 'hello world'
//    ignoreExitValue true
//
//
//    doLast {
//        if(execResult.exitValue == 0) {
//            print "Success"
//        } else {
//            print "Fail"
//        }
//    }
//}

//
//buildscript {
//    repositories {
//        maven {
//            url "https://plugins.gradle.org/m2/"
//        }
//    }
//    dependencies {
//        classpath "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.6.1"
//    }
//}
//
//apply plugin: "org.sonarqube"


task ver (type : Exec){
    commandLine './run.sh'
    ignoreExitValue true


    doLast {
    }
}


task buildscriptDependencies(type: DependencyReportTask) {
    outputFile = new File("text.txt")

    doLast {
        def text = new File("text.txt").text

        text = text.split("daniel")
        text = text[1].split("\n")[1].split(":")[2].replace(" -> project ", "")
        def ver = text as Double

        println ver + 1
    }
}

task printClasspath {
    println version
}